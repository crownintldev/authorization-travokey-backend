import { AnyMongoAbility } from '@casl/ability';
import { AbilityQuery } from '@casl/ability/extra';
/**
 * @deprecated use accessibleBy instead
 *
 * Converts ability action + subjectType to MongoDB query
 */
export declare function toMongoQuery<T extends AnyMongoAbility>(ability: T, subjectType: Parameters<T['rulesFor']>[1], action?: Parameters<T['rulesFor']>[0]): AbilityQuery | null;
export interface RecordTypes {
}
type StringOrKeysOf<T> = keyof T extends never ? string : keyof T;
/**
 * Returns Mongo query per record type (i.e., entity type) based on provided Ability and action.
 * In case action is not allowed, it returns `{ $expr: false }`
 */
export declare function accessibleBy<T extends AnyMongoAbility>(ability: T, action?: Parameters<T['rulesFor']>[0]): Record<StringOrKeysOf<RecordTypes>, AbilityQuery>;
export declare const EMPTY_RESULT_QUERY: {
    $expr: {
        $eq: number[];
    };
};
export {};
